services:
  # Web Server 1
  web01:
    build: .
    container_name: weather-web01
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=8084
      - SERVER_ID=web01
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    expose:
      - 8084
    volumes:
      - ./server.js:/app/server.js
      - ./public:/app/public
    networks:
      - weather-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Server 2
  web02:
    build: .
    container_name: weather-web02
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=8085
      - SERVER_ID=web02
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
    expose:
      - 8085
    volumes:
      - ./server.js:/app/server.js
      - ./public:/app/public
    networks:
      - weather-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Load Balancer
  loadbalancer:
    image: haproxy:2.8-alpine
    container_name: weather-loadbalancer
    ports:
      - "8080:80"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - weather-net
    depends_on:
      web01:
        condition: service_healthy
      web02:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/lb-health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  weather-net:
    driver: bridge
    name: weather-network
